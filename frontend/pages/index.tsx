import { useState } from 'react';
import { Button, FormControl, FormErrorMessage, FormHelperText, FormLabel, Input, Spacer, Stack, Table, TableCaption, TableContainer, Tbody, Td, Textarea, Th, Thead, Tr } from '@chakra-ui/react'
import type { NextPage } from 'next'
import axios from 'axios';

import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { COUNT_URL } from '../constants';
import { isError } from 'util';

type WordCount = {
  [key: string]: number | string
}

const Home: NextPage = () => {
  const [str, setStr] = useState("");
  const [loading, setLoading] = useState(false);
  const [count, setCount] = useState<Array<WordCount>>([]);
  const [error, setError] = useState<string>("");

  const countString = async () => {
    // if str is empty, return and set error
    if (!str) {
      setError("Please enter a string");
      return;
    }
    /* 
    * 1. set loading to true
    * 2. call the API to get the count
    * 3. if the API call is successful, set the count and error to empty string
    * 4. if the API call is not successful, set the error message and set count to empty array
    * 5. set loading to false (this is the last thing that happens)
    */
    setLoading(true);
    try {
      const res = await axios.get<WordCount>(COUNT_URL, { params: { string: str } });
      const counts = res.data;
      setCount(Object.keys(counts).map(key => ({ word: key, count: counts[key] })));
      setError("");
    } catch (error) {
      setError(error.message);
      setCount([]);
    } finally {
      setLoading(false);
    }
  }

  const reset = () => {
    setStr("");
    setCount([]);
    setError("");
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to the Counter
        </h1>

        <br />
        <br />

        <div className={styles.grid}>
          <Stack direction='column' spacing={4} align='center' width='100%'>
            <FormControl isInvalid={Boolean(error)}>
              <Textarea placeholder='Here is a sample placeholder' onChange={(e) => {
                setStr(e.target.value)
                if (e.target.value) {
                  setError("");
                } else {
                  setError("Please enter a string");
                }
              }}
                value={str}
              />
              {error && (
                <FormErrorMessage>{error}</FormErrorMessage>
              )}
            </FormControl>



            <div>
              <Button margin={5} colorScheme='teal' variant='outline' isLoading={loading} loadingText='Loading' onClick={countString}>
                Count words
              </Button>
              <Button margin={5} colorScheme='teal' variant='solid' onClick={reset}>
                Reset
              </Button>
            </div>
            <TableContainer>
              <Table variant='simple'>
                <Thead>
                  <Tr>
                    <Th>Word</Th>
                    <Th>Count</Th>
                  </Tr>
                </Thead>
                <Tbody>
                  {count.map((c) => (
                    <Tr key={c.word}>
                      <Td>{c.word}</Td>
                      <Td>{c.count}</Td>
                    </Tr>
                  ))}
                </Tbody>
              </Table>
            </TableContainer>
          </Stack>

        </div>
      </main>

    </div>
  )
}

export default Home
